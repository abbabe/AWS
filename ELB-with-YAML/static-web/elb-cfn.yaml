AWSTemplateFormatVersion: 2010-09-09
Description: AWS Apllication Load Balancer & CloudFormation sample template related to static website application

#AWSTemplateFormatVersion: 2010-09-09
#Description: |
#Parameters:
#Metadata:
#Mappings:
#Conditions:
#Resources:
#Transform:
#Outputs:

Parameters:
  InstanceCount:
    Description: Number of EC2 instances (must be between 1 and 2).
    Type: Number
    Default: 1
    MinValue: 1
    MaxValue: 2
    ConstraintDescription: 2 # Must be a number between 1 and 5.

  ImageId:
    Description: Image ID to launch EC2 instances.
    Type: AWS::EC2::Image::Id
    Default: ami-05fa00d4c63e32376
  InstanceType:
    Description: Instance type to launch EC2 instances.
    Type: String
    Default: t2.micro
    AllowedValues: [ t2.micro ]
    

  #VpcId:
   # Type: AWS::EC2::VPC::Id
   # Description: VpcId of your existing Virtual Private Cloud (VPC)
   # ConstraintDescription:  # must be the VPC Id of an existing Virtual Private Cloud.
    
  #Subnets:
   # Type: List<AWS::EC2::Subnet::Id>
   # Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    #ConstraintDescription: >- 
   #     - subnet-04ad28aaf55fa2632 
    #    - subnet-0e50ff6ec4cb1b59f
    #    - subnet-04c5ff3ec770e3f90
    #    - subnet-030762014af07b605
        
      #must be a list of at least two existing subnets associated with at least
      #two different availability zones. They should be residing in the selected
     # Virtual Private Cloud.



#Metadata:
 
Mappings:
  Region2Examples:
    us-east-1:
      Examples: 'https://s3.amazonaws.com/cloudformation-examples-us-east-1'
    us-east-2:
      Examples: 'https://s3-us-east-2.amazonaws.com/cloudformation-examples-us-east-2'
    us-west-1:
      Examples: 'https://s3-us-west-1.amazonaws.com/cloudformation-examples-us-west-1'
    us-west-2:
      Examples: 'https://s3-us-west-2.amazonaws.com/cloudformation-examples-us-west-2'
      

Conditions:
  Launch1: !Equals [1, 1]
  Launch2: !Not [!Equals [1, !Ref InstanceCount]]

Resources:
 #Create an Instance   aynı anda iki instance için parametre ve conditions da sart olusturduk
  Instance1:
    Condition: Launch1
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: mykey
      SecurityGroups:
       - !Ref  InstanceSecurityGroups
      Tags:
        - Key: Name
          Value: APLInstances

      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - "#!/bin/bash "
            - yum update -y
            - yum install -y httpd.x86_64
            - yum install wget -y
            - systemctl start httpd.service
            - systemctl enable httpd.service
            - sudo chmod -R 777 /var/www/html
            - cd /var/www/html
            - wget https://raw.githubusercontent.com/abbabe/AWS/main/Project-101-kittens-carousel-static-website-ec2/static-web/cat0.jpg
            - wget https://raw.githubusercontent.com/abbabe/AWS/main/Project-101-kittens-carousel-static-website-ec2/static-web/cat1.jpg
            - wget https://raw.githubusercontent.com/abbabe/AWS/main/Project-101-kittens-carousel-static-website-ec2/static-web/cat2.jpg
            - wget https://raw.githubusercontent.com/abbabe/AWS/main/Project-101-kittens-carousel-static-website-ec2/static-web/cat3.png
            - wget https://raw.githubusercontent.com/abbabe/AWS/main/Project-101-kittens-carousel-static-website-ec2/static-web/index.html


  Instance2:
    Condition: Launch2
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: mykey
      SecurityGroups:
       - !Ref  InstanceSecurityGroups
      Tags:
        - Key: Name
          Value: APLInstances

      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - "#!/bin/bash "
            - yum update -y
            - yum install -y httpd.x86_64
            - yum install wget -y
            - systemctl start httpd.service
            - systemctl enable httpd.service
            - sudo chmod -R 777 /var/www/html
            - cd /var/www/html
            - wget https://raw.githubusercontent.com/abbabe/AWS/main/Project-101-kittens-carousel-static-website-ec2/static-web/cat0.jpg
            - wget https://raw.githubusercontent.com/abbabe/AWS/main/Project-101-kittens-carousel-static-website-ec2/static-web/cat1.jpg
            - wget https://raw.githubusercontent.com/abbabe/AWS/main/Project-101-kittens-carousel-static-website-ec2/static-web/cat2.jpg
            - wget https://raw.githubusercontent.com/abbabe/AWS/main/Project-101-kittens-carousel-static-website-ec2/static-web/cat3.png
            - wget https://raw.githubusercontent.com/abbabe/AWS/main/Project-101-kittens-carousel-static-website-ec2/static-web/index.html

  # Create an Security Group for Instances
  InstanceSecurityGroups:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: My ALB Security Group
      GroupName: My ALB SG
      VpcId: vpc-0802fdf400cfc0961
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
         # CidrIp:  "0.0.0.0/0"
          SourceSecurityGroupId:
            Fn::Select:
              - 0
              - Fn::GetAtt:
                  - ApplicationLoadBalancer
                  - SecurityGroups
           
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          #CidrIp:  "0.0.0.0/0"

      


  # ALBSecurityGroup
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow acces to the ALB
      GroupName: My ALB SG
      VpcId: vpc-0802fdf400cfc0961
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp:  "0.0.0.0/0"
        
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp:  "0.0.0.0/0"

      


  # Create a Target Group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,302
      Name: MyALBTargetGP
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      TargetType: instance # calısmazsa sil gerekli degil
      UnhealthyThresholdCount: 2
      VpcId: vpc-0802fdf400cfc0961 #!Ref VpcId
    #  VpcId:  Buraya ıd nasıl cekılecek ?
    #    Fn::ImportValue: !Sub ${ALoadBalancerCfn}-VPC
  
  
  #Create an Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyApplicationLoadBalancer
      Scheme: internet-facing #zorunlu degıl sılebılırız
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: # !Ref Subnets
        - subnet-04ad28aaf55fa2632 
        - subnet-0e50ff6ec4cb1b59f
        

  #    Subnets:    Buraya AZs tanımlaması nasıl yapılacak ??
  #     - Fn::ImportValue: !Sub ${ALoadBalancerCfn}-PublicSubnet1
  #      - Fn::ImportValue: !Sub ${ALoadBalancerCfn}-PublicSubnet2


      

  #Create a Listener on Port 80
  ALBListenerNoSslCertificate:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP


  #Create a Listener on Port 443
 # ALBListenerSslCertificate:
   # Type : AWS::ElasticLoadBalancingV2::Listener
   # Properties:
    #  Certificates:
    #    - CertificateArn: !Ref AcmCertificate
    #  DefaultActions:
    #    - Type: forward
     #     TargetGroupArn: !Ref ALBTargetGroup
     # LoadBalancerArn: !Ref ApplicationLoadBalancer
     # Port: 443
    #  Protocol: HTTPS








 





Outputs:
# output of AppplicationLoadBalancer  web adress link
  URL:
    Description: URL of the sample website
    Value:
      Fn::Join: 
      - ''
      - - http://
        - Fn::GetAtt:
          - ApplicationLoadBalancer
          - DNSName   #PublicDnsName

  



# Export Target Group
  ALBTargetGroup:
    Description: Webserver target group
    Export:
      Name: !Sub ${AWS::StackName}-ALBTargetGroup
    Value: !Ref ALBTargetGroup

# Export Application Load Balancer Dns Name
  ApplicationLoadBalancerDnsName:
    Description: Application Load Balancer DNS Name
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerDnsName
    Value: !GetAtt ApplicationLoadBalancer.DNSName

# Export Application Load Balancer Zone ID
  ApplicationLoadBalancerZoneID:
    Description: Application Load Balancer Canonical Hosted Zone ID
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerZoneID
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
